import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

public class test {

public static void main(String[] args) {
		// TODO 
//			-Instead of file I/O should use inputstream (outputstream)
//		  	-Sibling condition (can sibling only the same type of node or it can be different - must be test)
//			-Sibling test 
	
	//Input file
	File file = new File("D:/Tempz/books.xml");		
	
	try {		
		
		InputStream targetStream = new FileInputStream(file);
		Document doc = DocumentBuilderFactory
				.newInstance()
				.newDocumentBuilder()
				.parse(new InputSource(targetStream));
		
		doc.getDocumentElement().normalize();
		
		XPath xpath = XPathFactory.newInstance().newXPath();
		NodeList nodes = (NodeList)xpath
//				.evaluate("//@lang|//@domain"
						.evaluate("//@"
				,doc, XPathConstants.NODESET);
//		NodeList nList = doc.getElementsByTagName("*");
		Node n=null;
		
		for (int i = 0; i < nodes.getLength(); i++) {
//            System.out.println("" + nodes.item(i).getTextContent());
			n=nodes.item(i);
			
			System.out.println(n.getNodeValue());
			
			switch (n.getNodeValue()) {
			case "de-DE":
				System.out.println(n.getNextSibling());
				System.out.println(n.getPreviousSibling());
				if (n.getNextSibling() == null & n.getPreviousSibling() == null)
					n.setNodeValue("fr-FR");
				break;
			case "Fabfab-DE-b2c-responsive-shop":
					n.setNodeValue("Fabfab-FR-b2c-responsive-shop");
				break;
			default:
				break;
			}

//			n=nodes.item(i).getAttributes().getNamedItem("lang");;
//			Element e1 = (Element)n;
			
//	         NamedNodeMap attr = nodes.item(i).getAttributes();
//             Node nodeAttr = attr.getNamedItem("de-DE");
//             nodeAttr.setTextContent("hu-HU"); 
			
			
//		    n.setNodeValue(val.replaceAll("DE-de", "HU-hu"));
//			
//			System.out.println(n.getNodeName());
			System.out.println(n.getNodeValue());
			
//			n.setNodeValue(val.replaceAll("DE-de", "HU-hu"));
//			
//			System.out.println(e1.getAttribute("lang"));
			
//			((Element)n).setAttribute("lang", "HU-hu");
//			
//			System.out.println("kurva");

            
//            System.out.println(e.getAttribute("lang"));
            
// 		   	if ("salary".equals(node.getNodeName())) {
// 				node.setTextContent("2000000");
// 			   }
            
//
//            TransformerFactory transformerFactory = TransformerFactory.newInstance();
//            Transformer transformer = transformerFactory.newTransformer();
//            DOMSource source = new DOMSource(doc);
//            StreamResult result = new StreamResult(new File("D:/Tempz/new_books.xml"));
//            transformer.transform(source, result);
            
            
         }
		
		
		Transformer xformer = TransformerFactory.newInstance().newTransformer();
		xformer.transform(new DOMSource(doc), new StreamResult(new File("D:/Tempz/new_books.xml")));
		
		
		
		//Transformer
//		TransformerFactory transformerFactory = TransformerFactory.newInstance();
//		   Transformer transformer = transformerFactory.newTransformer();
//		   DOMSource source = new DOMSource(doc);
//
//		   StreamResult result = new StreamResult(file);
//		   transformer.transform(source, result);
		
		
//		Set Node Value
//		for (int idx = 0; idx < nodes.getLength(); idx++) {
//		    Node value = nodes.item(idx).getAttributes().getNamedItem("value");
//		    String val = value.getNodeValue();
//		    value.setNodeValue(val.replaceAll("!Here", "What?"));
//		}
//		
		
		
//		NodeList nodes = doc.getElementsByTagName("price");
//		
//		System.out.println(nodes.getLength());
//		
//		List<String> urls = new ArrayList<String>();
//		  for (int i = 0; i < nodes.getLength(); i++) {
//		      urls.add (nodes.item(i).getNodeValue());
//		      System.out.println(nodes.item(i).getNodeValue()); 
	
	    
		
		
		
		
		
		
	} catch (Exception e) {
		System.out.println(e.getMessage());
	}
	
		
		
		
		
	}

}
